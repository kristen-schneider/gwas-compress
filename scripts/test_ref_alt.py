import unittest
from scripts import ref_alt


class TestSerializationToDeserialization(unittest.TestCase):

    def test_encode_SNVs_length_15(self):
        # 00 000000000000000000000000000000
        self.assertEqual(ref_alt.encode_SNVs('A'*15), 0)
        # 00 010101010101010101010101010101
        self.assertEqual(ref_alt.encode_SNVs('C'*15), 357913941)
        # 00 101010101010101010101010101010
        self.assertEqual(ref_alt.encode_SNVs('G'*15), 715827882)
        # 00 111111111111111111111111111111
        self.assertEqual(ref_alt.encode_SNVs('T'*15), 1073741823)

    # snp16 = 'A' * 25
    # snp17 = 'C' * 25
    # snp18 = 'G' * 25
    # snp19 = 'T' * 25
    # snp20 = 'T' * 40
    # snp21 = 'C' * 11
    # snp22 = 'ACGT'*7
    # def test_encode_SNVs_greater_than_15(self):
    #     # 00 000000000000000000000000000000, 10 000000101000000000000000000000
    #     self.assertEqual(ref_alt.col_input(self.snp16), [0, 2157969408])
    #     # 00 010101010101010101010101010101, 10 000000101001010101010101010101
    #     self.assertEqual(ref_alt.col_input(self.snp17), [357913941, 2158318933])
    #     # 00 101010101010101010101010101010, 10 000000101010101010101010101010
    #     self.assertEqual(ref_alt.col_input(self.snp18), [715827882, 2158668458])
    #     # 00 111111111111111111111111111111, 10 000000101011111111111111111111
    #     self.assertEqual(ref_alt.col_input(self.snp19), [1073741823, 2159017983])
    #     # 00 111111111111111111111111111111, 00 111111111111111111111111111111, 10 0000001010 11111111111111111111
    #     self.assertEqual(ref_alt.col_input(self.snp20), [1073741823, 1073741823, 2159017983])
    #     # 10 0000001010 01010101010101010101, 10 0000000001 00000000000000000001
    #     self.assertEqual(ref_alt.col_input(self.snp21), [2158318933, 2148532225])
    #     # ACGTACGTACGTACG TACGTACGTA CGT
    #     # 00 100100111001001110010011100100, 10 0000001010 00111001001110010011, 10 0000000011 00000000000000111001
    #     self.assertEqual(ref_alt.col_input(self.snp22), [618980580, 2158203795, 2150629433])

    # indelA = ['AAAAA']*1
    # indelC = ['CCCCC']*1
    # indelG = ['GGGGG']*1
    # indelT = ['TTTTT']*1
    # def test_encode_INDELs_only(self):
    #     # 11 000000010100000000000000000000
    #     self.assertEqual(ref_alt.col_input(self.indelA), [3226468352])
    #     # 11 000000010100000000000101010101
    #     self.assertEqual(ref_alt.col_input(self.indelC), [3226468693])
    #     # 11 000000010100000000001010101010
    #     self.assertEqual(ref_alt.col_input(self.indelG), [3226469034])
    #     # 11 000000010100000000001111111111
    #     self.assertEqual(ref_alt.col_input(self.indelT), [3226469375])
    #
    # snp_indel1 = ['A', 'A', 'A', 'AAAAA']
    # snp_indel2 = ['A', 'A', 'A', 'CCCCC']
    # snp_indel3 = ['A', 'C', 'T', 'G', 'GATACA']
    # def test_encode_SNPs_INDEL(self):
    #     # 10 000000001100000000000000000000, 11 000000010100000000000000000000
    #     self.assertEqual(ref_alt.col_input(self.snp_indel1), [2150629376, 3226468352])
    #     # 10 000000001100000000000000000000, 11 000000010100000000000101010101
    #     self.assertEqual(ref_alt.col_input(self.snp_indel2), [2150629376, 3226468693])
    #     # 10 000000010000000000000010110100, 11 000000011000000000000100110010
    #     self.assertEqual(ref_alt.col_input(self.snp_indel3), [2151678132, 3227517234])
    #
    # snp_indel_snp1 = ['A', 'A', 'A', 'AAAAA', 'A', 'A', 'A']
    # snp_indel_snp2 = ['A', 'A', 'A', 'CCCCC', 'A', 'A', 'A']
    # snp_indel_snp3 = ['A', 'C', 'T', 'G', 'GATACA', 'A', 'A', 'A']
    # def test_encode_SNPs_INDEL_SNPs(self):
    #     # 10 000000001100000000000000000000, 11 000000010100000000000000000000, 10 000000001100000000000000000000
    #     self.assertEqual(ref_alt.col_input(self.snp_indel_snp1), [2150629376, 3226468352, 2150629376])
    #     # 10 000000001100000000000000000000, 11 000000010100000000000101010101, 10 000000001100000000000000000000
    #     self.assertEqual(ref_alt.col_input(self.snp_indel_snp2), [2150629376, 3226468693, 2150629376])
    #     # 10 000000010000000000000010110100, 11 000000011000000000000100110010, 10 000000001100000000000000000000
    #     self.assertEqual(ref_alt.col_input(self.snp_indel_snp3), [2151678132, 3227517234, 2150629376])
    #
    # snp_indel_snp_indel1 = ['A', 'A', 'A', 'AAAAA', 'A', 'A', 'A', 'AAAAA']
    # snp_indel_snp_indel2 = ['A', 'A', 'A', 'CCCCC', 'A', 'A', 'A', 'CCCCC']
    # snp_indel_snp_indel3 = ['A', 'C', 'T', 'G', 'GATACA', 'A', 'A', 'A', 'GATACA']
    # def test_encode_SNPs_INDEL_SNPs_INDEL(self):
    #     # 10 000000001100000000000000000000, 11 000000010100000000000000000000, 10 000000001100000000000000000000, 11 000000010100000000000000000000
    #     self.assertEqual(ref_alt.col_input(self.snp_indel_snp_indel1), [2150629376, 3226468352, 2150629376, 3226468352])
    #     # 10 000000001100000000000000000000, 11 000000010100000000000101010101, 10 000000001100000000000000000000, 11 000000010100000000000101010101
    #     self.assertEqual(ref_alt.col_input(self.snp_indel_snp_indel2), [2150629376, 3226468693, 2150629376, 3226468693])
    #     # 10 000000010000000000000010110100, 11 000000011000000000000100110010, 10 000000001100000000000000000000, 11 000000011000000000000100110010
    #     self.assertEqual(ref_alt.col_input(self.snp_indel_snp_indel3), [2151678132, 3227517234, 2150629376, 3227517234])
    #
    #
    # junk1 = ['T', 'G', 'G', 'C', 'T', 'T', 'T', 'C', 'G', 'A',
    #          'CT',
    #          'A', 'G', 'T', 'T', 'T', 'T', 'G', 'G', 'G', 'C', 'G', 'T', 'C', 'A', 'A',
    #          'T', 'T', 'C', 'A', 'G', 'A', 'C', 'A', 'G', 'G',
    #          'A',
    #          'AAAAAAAAAAAATATATATATATATATATATATATAT',
    #          'G', 'G', 'G', 'T', 'C', 'C', 'A', 'G', 'A', 'C', 'T', 'C', 'T', 'A', 'C',
    #          'C', 'G', 'T', 'T', 'C', 'A', 'T', 'C', 'C', 'C',
    #          'TA',
    #          'C', 'C', 'C', 'A', 'C', 'C', 'C', 'C', 'C', 'G',
    #          'ACAGGAGGGCGGG']
    # # 10 0000001010 00100111111101101011
    # # 11 0000000010 00000000000000001101
    # # 00 000001111001101010111111111000
    # # 10 0000001010 10100001001000011111
    # # 10 0000000001 00000000000000000000
    # # 11 0000100101 00000000000000000000, 00 110011001100110011001100110000, 00 000000110011001100110011001100
    # # 00 010011011101001000010111101010
    # # 10 0000001010 01010111000111111001
    # # 11 0000000010 000000000000000000011
    # # 10 0000001010 10010101010100010101
    # # 11 0000001010 01101010001010000100, 10 0000000011 00000000000000101010
    #
    # def test_junk(self):
    #     # [2158133099, 3223322637, 31895544, 2158629407,
    #     #  2148532224, 3260022784, 858993456, 13421772,
    #     #  326403562, 2158326265, 6446645251, 2158581013,
    #     #  3232146052, 2150629418]
    #
    #     # [2158133099, 3223322637, 31895544, 2158629407,
    #     #  2148532224, 3260022784, 858993456, 3355443,
    #     #  326403562, 2158326265, 3223322627, 2158581013,
    #     #  3235291780, 42]
    #
    #     self.assertEqual(ref_alt.col_input(self.junk1), [2158133099, 3223322637, 31895544, 2158629407,
    #                                                      2148532224, 3231711232, 858993456, 13421772,
    #                                                      326403562, 2158326265, 6446645251, 2158581013,
    #                                                      3232146052, 2150629418])





if __name__ == '__main__':
    unittest.main()
